import { Db } from "mongodb";
import { SaltsCollection } from "./SaltsCollection";
import { SaltedHasher } from "./../SaltedHasher";
import { AccountData } from "../AccountData";

export interface AccountDocument{
    accountID?:number;
    username:string;
    password:string;
    access_level:number;
    enabled:boolean;
    date_joined:number;
}

export class AccountsCollection{
    public static readonly PASSWORD_LENGTH:number = 64;

    private static saltedHasher:SaltedHasher = new SaltedHasher(AccountsCollection.PASSWORD_LENGTH);

    public static createAccount(database:Db, username:string, password:string, accessLevel:number=1):Promise<string>{
        return new Promise((resolve, reject) => {
            let salt:string = AccountsCollection.saltedHasher.salt(password);
            let hash:string = AccountsCollection.saltedHasher.hash(password + salt);

            // account ID will be generated by mongo so its not here (uses objectID)
            let accountDoc:AccountDocument = {
                username,
                password: hash,
                access_level: accessLevel,
                enabled: true,
                date_joined: Date.now()
            };
    
            database.collection("accounts").insertOne(accountDoc)
                .then(result => {
                    console.log(result);
                    if(result){
                        SaltsCollection.storeSalt(database, username, salt)
                            .then(() => resolve(`Account "${username}" created.`))
                            .catch(err => reject(err));
                        
                    }
                    else reject(new Error(`Unable to create account "${username}".`));
                })
                .catch(err => reject(err));
        });
    }

    public static getAccount(database:Db, username:string, password:string):Promise<AccountData>{
        return new Promise((resolve, reject) => {
            database.collection("accounts").findOne({username})
                .then(result => {
                    if(result){
                        SaltsCollection.getSalt(database, username)
                            .then(saltDoc => {
                                let hash:string = AccountsCollection.saltedHasher.hash(password + saltDoc.salt);

                                if(hash === result.password){
                                    if(result.enabled){
                                        resolve(new AccountData(result._id.toString(), result.username, result.access_level));
                                    }
                                    else reject(new Error(`Account "${username}" is disabled.`));
                                    
                                }
                                else reject(new Error("Wrong password."));
                            })
                            .catch(err => reject(err));
                    }
                    else reject(new Error(`Username "${username}" not found.`));
                })
                .catch(err => reject(err));
            
        });
    }
}