"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SaltsCollection_1 = require("./SaltsCollection");
var SaltedHasher_1 = require("./../SaltedHasher");
var AccountData_1 = require("../AccountData");
var AccountsCollection = /** @class */ (function () {
    function AccountsCollection() {
    }
    AccountsCollection.createAccount = function (database, username, password, accessLevel) {
        if (accessLevel === void 0) { accessLevel = 1; }
        return new Promise(function (resolve, reject) {
            var salt = AccountsCollection.saltedHasher.salt(password);
            var hash = AccountsCollection.saltedHasher.hash(password + salt);
            // account ID will be generated by mongo so its not here (uses objectID)
            var accountDoc = {
                username: username,
                password: hash,
                access_level: accessLevel,
                enabled: true,
                date_joined: Date.now()
            };
            database.collection("accounts").insertOne(accountDoc)
                .then(function (result) {
                console.log(result);
                if (result) {
                    SaltsCollection_1.SaltsCollection.storeSalt(database, username, salt)
                        .then(function () { return resolve("Account \"" + username + "\" created."); })
                        .catch(function (err) { return reject(err); });
                }
                else
                    reject(new Error("Unable to create account \"" + username + "\"."));
            })
                .catch(function (err) { return reject(err); });
        });
    };
    AccountsCollection.getAccount = function (database, username, password) {
        return new Promise(function (resolve, reject) {
            database.collection("accounts").findOne({ username: username })
                .then(function (result) {
                if (result) {
                    SaltsCollection_1.SaltsCollection.getSalt(database, username)
                        .then(function (saltDoc) {
                        var hash = AccountsCollection.saltedHasher.hash(password + saltDoc.salt);
                        if (hash === result.password) {
                            if (result.enabled) {
                                resolve(new AccountData_1.AccountData(result._id.toString(), result.username, result.access_level));
                            }
                            else
                                reject(new Error("Account \"" + username + "\" is disabled."));
                        }
                        else
                            reject(new Error("Wrong password."));
                    })
                        .catch(function (err) { return reject(err); });
                }
                else
                    reject(new Error("Username \"" + username + "\" not found."));
            })
                .catch(function (err) { return reject(err); });
        });
    };
    AccountsCollection.PASSWORD_LENGTH = 64;
    AccountsCollection.saltedHasher = new SaltedHasher_1.SaltedHasher(AccountsCollection.PASSWORD_LENGTH);
    return AccountsCollection;
}());
exports.AccountsCollection = AccountsCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNjb3VudHNDb2xsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6InNyYy8qKi8qLnRzLyIsInNvdXJjZXMiOlsiZGF0YWJhc2UvY29sbGVjdGlvbnMvQWNjb3VudHNDb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscURBQW9EO0FBQ3BELGtEQUFpRDtBQUNqRCw4Q0FBNkM7QUFXN0M7SUFBQTtJQTREQSxDQUFDO0lBdkRpQixnQ0FBYSxHQUEzQixVQUE0QixRQUFXLEVBQUUsUUFBZSxFQUFFLFFBQWUsRUFBRSxXQUFvQjtRQUFwQiw0QkFBQSxFQUFBLGVBQW9CO1FBQzNGLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLElBQUksR0FBVSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pFLElBQUksSUFBSSxHQUFVLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBRXhFLHdFQUF3RTtZQUN4RSxJQUFJLFVBQVUsR0FBbUI7Z0JBQzdCLFFBQVEsVUFBQTtnQkFDUixRQUFRLEVBQUUsSUFBSTtnQkFDZCxZQUFZLEVBQUUsV0FBVztnQkFDekIsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7YUFDMUIsQ0FBQztZQUVGLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztpQkFDaEQsSUFBSSxDQUFDLFVBQUEsTUFBTTtnQkFDUixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwQixJQUFHLE1BQU0sRUFBQztvQkFDTixpQ0FBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQzt5QkFDOUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsZUFBWSxRQUFRLGdCQUFZLENBQUMsRUFBekMsQ0FBeUMsQ0FBQzt5QkFDckQsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO2lCQUVsQzs7b0JBQ0ksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGdDQUE2QixRQUFRLFFBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEUsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFYSw2QkFBVSxHQUF4QixVQUF5QixRQUFXLEVBQUUsUUFBZSxFQUFFLFFBQWU7UUFDbEUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLFFBQVEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsUUFBUSxVQUFBLEVBQUMsQ0FBQztpQkFDOUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtnQkFDUixJQUFHLE1BQU0sRUFBQztvQkFDTixpQ0FBZSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO3lCQUN0QyxJQUFJLENBQUMsVUFBQSxPQUFPO3dCQUNULElBQUksSUFBSSxHQUFVLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFFaEYsSUFBRyxJQUFJLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBQzs0QkFDeEIsSUFBRyxNQUFNLENBQUMsT0FBTyxFQUFDO2dDQUNkLE9BQU8sQ0FBQyxJQUFJLHlCQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzZCQUN6Rjs7Z0NBQ0ksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGVBQVksUUFBUSxvQkFBZ0IsQ0FBQyxDQUFDLENBQUM7eUJBRWhFOzs0QkFDSSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO29CQUM5QyxDQUFDLENBQUM7eUJBQ0QsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO2lCQUNsQzs7b0JBQ0ksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGdCQUFhLFFBQVEsa0JBQWMsQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQztRQUVuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUExRHNCLGtDQUFlLEdBQVUsRUFBRSxDQUFDO0lBRXBDLCtCQUFZLEdBQWdCLElBQUksMkJBQVksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQXlEcEcseUJBQUM7Q0FBQSxBQTVERCxJQTREQztBQTVEWSxnREFBa0IifQ==