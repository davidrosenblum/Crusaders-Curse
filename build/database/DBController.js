"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DBAccount_1 = require("./DBAccount");
var DBSchema_1 = require("./DBSchema");
var Data_1 = require("../data/Data");
var TokenGenerator_1 = require("../utils/TokenGenerator");
var DBController = /** @class */ (function () {
    function DBController(mongoDatabase) {
        this._database = mongoDatabase;
        this.createCollections();
    }
    DBController.salt = function (input) {
        if (input.length < DBController.PASSWORD_SIZE) {
            var size = DBController.PASSWORD_SIZE - input.length;
            return TokenGenerator_1.TokenGenerator.anyToken(size);
        }
        return "";
    };
    DBController.hash = function (input) {
        var buffer = new Array(input.length);
        for (var i = 0; i < buffer.length; i++) {
            buffer[i] = DBController.HASH_VALS[(i + input.charCodeAt(i)) % DBController.HASH_VALS.length];
        }
        return buffer.join("");
    };
    DBController.prototype.createCollections = function () {
        var _this = this;
        this._database.createCollection("accounts", function (err, res) {
            _this._database.collection("accounts").createIndex({ username: 1 }, { unique: true });
        });
        this._database.createCollection("salts", function (err, res) {
            _this._database.collection("salts").createIndex({ username: 1 }, { unique: true });
        });
        this._database.createCollection("characters", function (err, res) {
            _this._database.collection("characters").createIndex({ name: 1 }, { unique: true });
        });
    };
    DBController.prototype.createAccount = function (username, password, accessLevel) {
        var _this = this;
        if (accessLevel === void 0) { accessLevel = 1; }
        return new Promise(function (resolve, reject) {
            var salt = DBController.salt(password);
            var hash = DBController.hash(password + salt);
            // account ID will be generated by mongo so its not here (uses objectID)
            var account = {
                username: username,
                password: hash,
                access_level: accessLevel,
                enabled: true,
                date_joined: Date.now()
            };
            _this._database.collection("accounts").insertOne(account)
                .then(function (result) {
                if (result) {
                    _this.storeSalt(username, salt)
                        .then(function () { return resolve("Account \"" + username + "\" created."); })
                        .catch(function (err) { return reject(err); });
                }
                else
                    reject(new Error("Unable to create account \"" + username + "\"."));
            })
                .catch(function (err) { return reject(err); });
        });
    };
    DBController.prototype.getAccount = function (username, password) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._database.collection("accounts").findOne({ username: username })
                .then(function (result) {
                if (result) {
                    var account_1 = result;
                    _this.getSalt(username)
                        .then(function (saltDoc) {
                        var hash = DBController.hash(password + saltDoc.salt);
                        if (hash === account_1.password) {
                            if (account_1.enabled) {
                                resolve(new DBAccount_1.DBAccount(account_1.accountID, account_1.username));
                            }
                            else
                                reject(new Error("Account \"" + username + "\" is disabled."));
                        }
                        else
                            reject(new Error("Wrong password."));
                    })
                        .catch(function (err) { return reject(err); });
                }
                else
                    reject(new Error("Username \"" + username + "\" not found."));
            })
                .catch(function (err) { return reject(err); });
        });
    };
    DBController.prototype.storeSalt = function (username, salt) {
        var saltDoc = { username: username, salt: salt };
        return this._database.collection("salts").insertOne(saltDoc);
    };
    DBController.prototype.getSalt = function (username) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._database.collection("salts").findOne({ username: username })
                .then(function (result) { return result ? resolve(result) : reject(new Error("Salt not found.")); })
                .catch(function (err) { return reject(err); });
        });
    };
    DBController.prototype.createCharacter = function (accountID, archetypeID, name, skin) {
        if (skin === void 0) { skin = 1; }
        var characterDoc = DBSchema_1.createDefaultCharacter(accountID, archetypeID, name, skin);
        return this._database.collection("characters").insertOne(characterDoc);
    };
    DBController.prototype.deleteCharacter = function (accountID, name) {
        return this._database.collection("characters").deleteOne({ account_id: accountID, name: name });
    };
    DBController.prototype.getCharacter = function (accountID, name) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._database.collection("characters").findOne({ accountID: accountID, name: name })
                .then(function (data) {
                if (data) {
                    resolve(data);
                }
                else
                    reject(new Error("Character " + name + " not found."));
            })
                .catch(function (err) { return reject(err); });
        });
    };
    DBController.prototype.getCharacterList = function (accountID) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._database.collection("characters").find({ accountID: accountID }).toArray()
                .then(function (results) {
                var previews = new Array(results.length);
                results.forEach(function (result, index) {
                    previews[index] = {
                        name: result.name,
                        map: Data_1.getMapName(result.map_id),
                        archetype: Data_1.getArchetypeName(result.archetype_id),
                        level: result.level
                    };
                });
                resolve(previews);
            })
                .catch(function (err) { return reject(err); });
        });
    };
    DBController.prototype.updateCharacter = function (data) {
        var name = data.name;
        return this._database.collection("characters").findOneAndUpdate({ name: name }, data);
    };
    DBController.PASSWORD_SIZE = 64;
    DBController.HASH_VALS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".split("");
    DBController.tokenGen = new TokenGenerator_1.TokenGenerator(DBController.PASSWORD_SIZE);
    return DBController;
}());
exports.DBController = DBController;
//# sourceMappingURL=data:application/json;base64,